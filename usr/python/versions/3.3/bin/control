#!/bin/bash

source $OPENSHIFT_CARTRIDGE_SDK_BASH
source "${OPENSHIFT_ADVANCED_PYTHON_DIR}/usr/versions/${OPENSHIFT_ADVANCED_PYTHON_VERSION}/lib/create-virtenv"



function start_app() {
    cd "$OPENSHIFT_REPO_DIR"
    nohup python -u app.py > "$OPENSHIFT_ADVANCED_PYTHON_DIR/logs/appserver.log" 2>&1 &
    echo $! > $OPENSHIFT_ADVANCED_PYTHON_DIR/run/appserver.pid
}

function start() {
    echo "Starting PYTHON cart"
    start_app
}

function stop_app() {
    if [ -s $OPENSHIFT_ADVANCED_PYTHON_DIR/run/appserver.pid ]
    then
        kpid=$(cat $OPENSHIFT_ADVANCED_PYTHON_DIR/run/appserver.pid)
        iters=0
        while kill $kpid >/dev/null 2>&1
        do
            iters=$(($iters + 1))
            [ $iters -gt 10 ] && break
            sleep 1
        done
        kill -KILL $kpid >/dev/null 2>&1 || :
        rm -f $OPENSHIFT_ADVANCED_PYTHON_DIR/run/appserver.pid
    fi
}

function stop() {
    echo "Stopping PYTHON cart"
    stop_app
}


function restart() {
    echo "Restarting PYTHON cart"
    stop
    start
}

function status() {
    res=0
    output=$(curl -s -m 30 http://$OPENSHIFT_ADVANCED_PYTHON_IP:$OPENSHIFT_ADVANCED_PYTHON_PORT/ &> /dev/null) || res=1

    if [ $res -eq 0 ]
    then
        client_result "Application is running"
        client_result "$output"
    else
        client_result "Application is either stopped or inaccessible"
    fi
}

function reload() {
    echo "Reloading PYTHON cart"
    restart
}

# Clean up any log files
function tidy() {
  client_message "Emptying python logs in: $OPENSHIFT_ADVANCED_PYTHON_DIR/logs"
  rm logs/appserver.log
}

function build() {
    if [ -n "$OPENSHIFT_PYPI_MIRROR_URL" ]; then
        m=$OPENSHIFT_PYPI_MIRROR_URL
        if curl -m 15 -f -s "$m" &>/dev/null
        then
            OPENSHIFT_PYTHON_MIRROR="-i $m"
        fi
    fi

    if force_clean_build_enabled_for_latest_deployment; then
        echo "Force-clean builds are enabled" 1>&2
        rm -rf $VIRTUAL_ENV/*
    fi

    if [ ! -f $VIRTUAL_ENV/bin/python ]; then
      echo "Recreating virtenv" 1>&2
      create-virtenv
    fi

    echo "Activating virtenv"
    activate-virtenv

    if [ -f ${OPENSHIFT_REPO_DIR}/requirements.txt ]
    then
        ( cd $OPENSHIFT_REPO_DIR; pip install -r ${OPENSHIFT_REPO_DIR}/requirements.txt $OPENSHIFT_PYTHON_MIRROR )
    fi

    if [ -f ${OPENSHIFT_REPO_DIR}/setup.py ]
    then
        ( cd $OPENSHIFT_REPO_DIR; python ${OPENSHIFT_REPO_DIR}/setup.py develop $OPENSHIFT_PYTHON_MIRROR )
    fi

    relative-virtenv
}

function deploy() {
    relative-virtenv
    activate-virtenv
}

case "$1" in
  start)     start ;;
  stop)      stop ;;
  restart)   restart ;;
  status)    status ;;
  reload)    reload ;;
  tidy)      tidy ;;
  build)     build ;;
  deploy)    deploy ;;
  *)         exit 0
esac
